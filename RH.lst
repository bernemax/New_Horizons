GAMS 28.2.0  r750fa45 Released Aug 19, 2019 WEX-WEI x86 64bit/MS Windows 07/07/20 14:56:54 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  set t
   2  /1*12/
   3      it
   4  /i1*i9/
   5      branch  (it,t) 'time periods in each iteration'
   6  /i1.(1*3),
   7  i2.(2*4),
   8  i3.(3*5)
   9  /
  10      opt_time(t,it)    'optimization time'
  11      tfirst(t)
  12      first_t_it(t,it)  'first hour in each iteration'
  13      Second_t_it(t,it) 'second hour in each iteration'
  14   
  15  ;
  16   
  17  tfirst(t) = yes$(ord(t) eq 1);
  18   
  19   
  20  set
  21          p        power plants
  22  /
  23  P1_NUC
  24  P2_OCGT
  25  P3_LIG
  26  P4_CCGT
  27  P5_Wind
  28  /
  29          c(p)            conventional plants
  30          r(p)            RES plants
  31  ;
  32  alias(it,iitt)
  33  alias(t,tt)
  34  ;
  35  PARAMETERS
  36          genup                   all information about generation
  37          timeup                  all information about time-series
  38          cap(p)                  capacities of PPs
  39          vc(p)                   variable production costs of PPs
  40          demand_forecast(t,it)      demand forecasted
  41          demand_real (t,it)         actual demand
  42          af_wind(t)              availability of wind
  43          SU_costs(p)             start_up_costs
  44   
  45          model_stor_out_it(t,it)
  46          level_su(p,t,it)
  47          online(p,t,it)
  48  ;
  49   
  55   
GDXIN   C:\Users\iegor\Desktop\Git projects\GitHub - New_Horizons\try_data.gdx
--- LOAD  genup = 1:genup
--- LOAD  timeup = 2:timeup
  61   
  62  *execute_unload "check.gdx";
  63  *$stop
  64   
  65  c(p)    = genup(p,'type')= 1 ;
  66  r(p)    = genup(p,'type')= 2 ;
  67  cap(p)  = genup(p,'capacity');
  68  vc(p)                   = genup(p,'vc')      ;
  69  demand_forecast(t,it)   = timeup(t,'Demand_forecast')  ;
  70  demand_real(t,it)       = timeup(t,'actual_demand')  ;
  71  af_wind(t)              = timeup(t,'Wind_af') ;
  72  SU_costs(p)             = genup(p,'Start_up_costs');
  73  model_stor_out_it(t,it) = 0;
  74  level_su(p,t,it)        = 0;
  75   
  76  *execute_unload "check.gdx";
  77  *$stop
  78   
  79  Parameters
  80  count
  81   
  82  price(t,it)
  83   
  84  cap_stor
  85  power_turb
  86  power_pump
  87  loss_stor
  88  g_min
  89  ;
  90   
  91   
  92  count = 1;
  93   
  94  cap_stor    = 200;
  95  power_turb  = 100;
  96  power_pump  = 50;
  97  loss_stor   = 0.2;
  98  g_min = 0.3;
  99   
 100   
 101   
 102  variable
 103          TC
 104  ;
 105   
 106  positive variable
 107  G(p,t,it)
 108  report_gen(p,t,it,*)
 109  report_stor(t,it,*)
 110   
 111  level_stor(t,it)
 112  charge_stor(t,it)
 113  gen_stor(t,it)
 114   
 115   
 116   
 117   
 118  P_ON(p,t,it) running capacity    [MW]
 119  SU(p,t,it)   start-up activity   [MW]
 120  ;
 121   
 122  equations
 123   
 124  OBJECTIVE
 125  ENERGY_BALANCE
 126  MAX_GENERATION
 127  MAX_GENERATION_WIND
 128   
 129   
      stor_level_def
      *Stor_gen_RH
      stor_level_cap
      stor_gen_cap_level
      stor_charge_cap
       
      *stor_level_iteration
 139   
 140  min_generation
 141  max_online
 142  startup
 143  ;
 144   
 145  OBJECTIVE..                                          TC =e= sum((p,t,iitt)
      $opt_time(t,iitt), G(p,t,iitt)*vc(p))
 146                                                            + sum((c,t,iitt)
      , Su(c,t,iitt) * SU_costs(c));
 147   
 148  ENERGY_BALANCE(t,iitt)$opt_time(t,iitt)..                            deman
      d_forecast(t,iitt) =e= sum(p, G(p,t,iitt));
 149  *                                                                         
            + gen_stor(t,iitt) - charge_stor(t,iitt);
 150   
 151   
 152  MAX_GENERATION(c,t,iitt)..                     G(c,t,iitt)        =l= P_On
      (c,t,iitt);
 153  *                                                                    cap(c
      )
 154  MAX_GENERATION_WIND(r,t,iitt)..                G(r,t,iitt)        =l= cap(
      r)*af_wind(t);
 155   
      *******************Storage*******************
      stor_level_def(t,iitt)..                             level_stor(t,iitt)  =
      e= level_stor(t-1,iitt) + charge_stor(t,iitt)*(1-loss_stor) - gen_stor(t,i
      itt);
      *Stor_gen_RH(t,iitt)..                                gen_stor(t,iitt)$tfi
      rst(t)    =e= 0;
      stor_level_cap(t,iitt)..                             level_stor(t,iitt)  =
      l= cap_stor  ;
      stor_gen_cap_level(t,iitt)..                         gen_stor(t,iitt)    =
      l= power_turb;
      stor_charge_cap(t,iitt)..                            charge_stor(t,iitt) =
      l= power_pump;
       
       
      *stor_level_iteration(t,iitt,first_t_it,second_t_it)..   level_stor(t,iitt
      )$first_t_it  =e= level_stor(t,iitt-1)$second_t_it;
 167  ******************Start_Up_Activity**********
 168   
 169  min_generation(c,t,iitt)..                             P_on(c,t,iitt) * g_
      min                   =l= G(c,t,iitt)           ;
 170  max_online(c,t,iitt)..                                 G(c,t,iitt)        
                            =l= cap(c)                ;
 171  startup(c,t,iitt)..                                    P_on(c,t,iitt) - P_
      on(c,t-1,iitt)        =l= SU(c,t,iitt)          ;
 172   
 173   
 174  model try /all/;
 175   
 176  *execute_unload "check.gdx";
 177  *$stop
 178   
 179   
 180  Loop (branch,
 181   
 182  *[time definitions]
 183  *solve model
 184  *export data
 185  *);
 186   
 187   
 188           opt_time(t,it)  =    branch (it,t);
 189   
 190           if (ord(branch) eq count,
****                        $651,650
 191           demand_forecast(t,it)$(ord(t)=count)= demand_real(t,it);
 192           demand_forecast(t,it)$(ord(t) le count -1) = demand_real(t,it);
 193           demand_forecast(t,it)$(ord(t) gt count +3) = 0;
 194           demand_real(t,it)$(ord(t) gt count )       = 0;
 195   
 196           else
 197           demand_forecast(t,it)= demand_forecast(t,it);
 198           );
 199   
 200           first_t_it(t,it) = count$(ord(t)=count);
 201           Second_t_it(t,it)= count$(ord(t)=count+1);
 202   
 203   
 204           solve try using lp minimizing TC ;
****                                            $257
 205   
 206  *report_gen.l(p,t,it,'generation') = G.l(p,t,it);
 207   
 208  *G.fx(p,t,it)$(ord(t)= ord(it) and opt_time(t,it)) = G.l(p,t,it);
 209   
 210  *report_stor.l(t,it,'storage') = level_stor.l(t,it);
 211   
 212  *model_stor_out_it(t,it) = level_stor.l(t,it);
 213   
 214  *su.fx(c,t,it) = su.l(c,t,it);
 215  *level_su(c,t,it) = su.l(c,t,it);
 216   
 217  *P_on.fx(c,t,it) = P_on.l(c,t,it);
 218  *online(c,t,it) = p_on.l(c,t,it);
 219   
 220           Price(t,it)$opt_time(t,it) = - Energy_balance.m(t,it);
****                                                         $141
 221   
 222           count = count+1;
 223  );
 224   
 225  execute_unload "check.gdx";
STOP C:\Users\iegor\Desktop\Git projects\GitHub - New_Horizons\RH.gms
GAMS 28.2.0  r750fa45 Released Aug 19, 2019 WEX-WEI x86 64bit/MS Windows 07/07/20 14:56:54 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Error Messages


141  Symbol declared but no values have been assigned. Check for missing
        data definition, assignment, data loading or implicit assignment
        via a solve statement.
        A wild shot: You may have spurious commas in the explanatory
        text of a declaration. Check symbol reference list.
257  Solve statement not checked because of previous errors
650  Ord type functions only work with controlling sets not with maps
651  Ord type functions can only be referenced with a one dimensional set

**** 4 ERROR(S)   0 WARNING(S)
GAMS 28.2.0  r750fa45 Released Aug 19, 2019 WEX-WEI x86 64bit/MS Windows 07/07/20 14:56:54 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\iegor\Desktop\Git projects\Gi
                                          tHub - New_Horizons\RH.gms
     2       57 CALL           1      57  gdxxrw I=try_data.xlsx O=try_data.gdx 
                                          cmerge=1 @input_data.tmp
     3       58 GDXIN          1      58  C:\Users\iegor\Desktop\Git projects\Gi
                                          tHub - New_Horizons\try_data.gdx
     4      226 STOP           1     226  C:\Users\iegor\Desktop\Git projects\Gi
                                          tHub - New_Horizons\RH.gms


COMPILATION TIME     =        0.687 SECONDS      3 MB  28.2.0 r750fa45 WEX-WEI


USER: Small MUD - 5 User License                     S181112:0455AO-WIN
      BTU Cottbus-Senftenberg, FG Energiewirtschaft              DC5591
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\iegor\Desktop\Git projects\GitHub - New_Horizons\RH.gms
Output     C:\Users\iegor\Desktop\Git projects\GitHub - New_Horizons\RH.lst

**** USER ERROR(S) ENCOUNTERED
